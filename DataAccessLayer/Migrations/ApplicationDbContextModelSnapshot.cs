// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CAttributeCulture", b =>
                {
                    b.Property<Guid>("BonusAttributesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CultureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BonusAttributesId", "CultureId");

                    b.HasIndex("CultureId");

                    b.ToTable("CAttributeCulture");
                });

            modelBuilder.Entity("CultCulture", b =>
                {
                    b.Property<Guid>("AvailableCultsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CultureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AvailableCultsId", "CultureId");

                    b.HasIndex("CultureId");

                    b.ToTable("CultCulture");
                });

            modelBuilder.Entity("CultSkill", b =>
                {
                    b.Property<Guid>("BonusSkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CultId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BonusSkillsId", "CultId");

                    b.HasIndex("CultId");

                    b.ToTable("CultSkill");
                });

            modelBuilder.Entity("CultureSkill", b =>
                {
                    b.Property<Guid>("BonusSkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CultureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BonusSkillsId", "CultureId");

                    b.HasIndex("CultureId");

                    b.ToTable("CultureSkill");
                });

            modelBuilder.Entity("Domain.Burns.Burn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Chakra")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EarthChakra")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PotentCost")
                        .HasColumnType("int");

                    b.Property<int>("WeakCost")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Burns", (string)null);
                });

            modelBuilder.Entity("Domain.Burns.CharacterBurn", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BurnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "BurnId");

                    b.HasIndex("BurnId");

                    b.ToTable("CharacterBurns", (string)null);
                });

            modelBuilder.Entity("Domain.Burns.NPCBurn", b =>
                {
                    b.Property<Guid>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BurnId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("NPCId", "BurnId");

                    b.HasIndex("BurnId");

                    b.ToTable("NPCBurns", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.Background", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Backgrounds", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.CAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFocusOriented")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("ChroniclerMoney")
                        .HasColumnType("int");

                    b.Property<Guid>("ConceptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CultureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentSporeInfestation")
                        .HasColumnType("int");

                    b.Property<int>("DinarMoney")
                        .HasColumnType("int");

                    b.Property<int>("Ego")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("FleshWounds")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<Guid>("IdApplicationUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdRoom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFocusOriented")
                        .HasColumnType("bit");

                    b.Property<int>("MaxEgo")
                        .HasColumnType("int");

                    b.Property<int>("MaxFleshWounds")
                        .HasColumnType("int");

                    b.Property<int>("MaxSporeInfestation")
                        .HasColumnType("int");

                    b.Property<int>("MaxTrauma")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassiveDefense")
                        .HasColumnType("int");

                    b.Property<int>("PermanentSporeInfestation")
                        .HasColumnType("int");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Trauma")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConceptId");

                    b.HasIndex("CultId");

                    b.HasIndex("CultureId");

                    b.HasIndex("IdApplicationUser");

                    b.HasIndex("IdRoom");

                    b.HasIndex("RankId");

                    b.ToTable("Characters", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.CharacterAttribute", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("CharacterAttributes", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.CharacterBackground", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BackgroundId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "BackgroundId");

                    b.HasIndex("BackgroundId");

                    b.ToTable("CharacterBackgrounds", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.CharacterPotential", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PotentialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "PotentialId");

                    b.HasIndex("PotentialId");

                    b.ToTable("CharacterPotentials", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.CharacterSkill", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("CharacterId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkills", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.Concept", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("BonusAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("BonusAttributeId");

                    b.ToTable("Concepts", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.ConceptSkill", b =>
                {
                    b.Property<Guid>("ConceptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConceptId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("ConceptSkill");
                });

            modelBuilder.Entity("Domain.Characters.Cult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cults", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.Culture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cultures", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.Potential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CultId");

                    b.ToTable("Potentials", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.PotentialPrerequisite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("AttributeRequiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BackgroundLevelRequired")
                        .HasColumnType("int");

                    b.Property<Guid?>("BackgroundRequiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBackgroundPrerequisite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRankPrerequisite")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RankRequiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SkillRequiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SumRequired")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeRequiredId");

                    b.HasIndex("BackgroundRequiredId");

                    b.HasIndex("RankRequiredId");

                    b.HasIndex("SkillRequiredId");

                    b.ToTable("PotentialPrerequisites", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CultId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("ParentRankId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CultId");

                    b.HasIndex("ParentRankId");

                    b.ToTable("Ranks", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.RankPrerequisite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("AttributeRequiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BackgroundLevelRequired")
                        .HasColumnType("int");

                    b.Property<Guid?>("BackgroundRequiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBackgroundPrerequisite")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SkillRequiredId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SumRequired")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeRequiredId");

                    b.HasIndex("BackgroundRequiredId");

                    b.HasIndex("SkillRequiredId");

                    b.ToTable("RankPrerequisites", (string)null);
                });

            modelBuilder.Entity("Domain.Characters.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CAttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFocusOriented")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CAttributeId");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("Domain.Equipments.CharacterEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsedSlots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("CharacterEquipments", (string)null);
                });

            modelBuilder.Entity("Domain.Equipments.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Capacity")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Encumbrance")
                        .HasColumnType("int");

                    b.Property<string>("EnergyStorage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EquipmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.Property<int>("TechLevel")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("Equipments", (string)null);
                });

            modelBuilder.Entity("Domain.Equipments.EquipmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Equipments.NPCEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsedSlots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("NPCId");

                    b.ToTable("NPCEquipments", (string)null);
                });

            modelBuilder.Entity("Domain.NPCs.NPC", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Ego")
                        .HasColumnType("int");

                    b.Property<string>("EnemySpec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FleshWounds")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PassiveDefense")
                        .HasColumnType("int");

                    b.Property<int>("Trauma")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NPCs", (string)null);
                });

            modelBuilder.Entity("Domain.NPCs.NPCAttribute", b =>
                {
                    b.Property<Guid>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("NPCId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("NPCAttributes", (string)null);
                });

            modelBuilder.Entity("Domain.NPCs.NPCPotential", b =>
                {
                    b.Property<Guid>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PotentialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("NPCId", "PotentialId");

                    b.HasIndex("PotentialId");

                    b.ToTable("NPCPotentials", (string)null);
                });

            modelBuilder.Entity("Domain.NPCs.NPCSkill", b =>
                {
                    b.Property<Guid>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("NPCId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("NPCSkills", (string)null);
                });

            modelBuilder.Entity("Domain.Protections.CharacterProtection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProtectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsedConnectors")
                        .HasColumnType("int");

                    b.Property<int>("UsedSlots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ProtectionId");

                    b.ToTable("CharacterProtections", (string)null);
                });

            modelBuilder.Entity("Domain.Protections.NPCProtection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProtectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsedConnectors")
                        .HasColumnType("int");

                    b.Property<int>("UsedSlots")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NPCId");

                    b.HasIndex("ProtectionId");

                    b.ToTable("NPCProtections", (string)null);
                });

            modelBuilder.Entity("Domain.Protections.Protection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int?>("Armor")
                        .HasColumnType("int");

                    b.Property<string>("Attack")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Connectors")
                        .HasColumnType("int");

                    b.Property<string>("Consuption")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Defense")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Encumbrance")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.Property<int>("Stockage")
                        .HasColumnType("int");

                    b.Property<int>("TechLevel")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Protections", (string)null);
                });

            modelBuilder.Entity("Domain.Protections.ProtectionQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProtectionQualities", (string)null);
                });

            modelBuilder.Entity("Domain.Rooms.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Domain.Rooms.UserRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdApplicationUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdRoom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("InvitationAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGM")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdApplicationUser");

                    b.HasIndex("IdRoom");

                    b.ToTable("UserRooms", (string)null);
                });

            modelBuilder.Entity("Domain.Users.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Domain.Vehicles.CharacterVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FleshLost")
                        .HasColumnType("int");

                    b.Property<int>("TraumaLost")
                        .HasColumnType("int");

                    b.Property<int>("UsedSlots")
                        .HasColumnType("int");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CharacterVehicles", (string)null);
                });

            modelBuilder.Entity("Domain.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("Acceleration")
                        .HasColumnType("int");

                    b.Property<int>("Armor")
                        .HasColumnType("int");

                    b.Property<int>("BodyFlesh")
                        .HasColumnType("int");

                    b.Property<int>("Brake")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.Property<int>("StructureTrauma")
                        .HasColumnType("int");

                    b.Property<int>("TechLevel")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<Guid>("VehicleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("Domain.Vehicles.VehicleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes", (string)null);
                });

            modelBuilder.Entity("Domain.Weapons.CharacterWeapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BulletsInMagazine")
                        .HasColumnType("int");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SlotAttachments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsedSlots")
                        .HasColumnType("int");

                    b.Property<Guid>("WeaponId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("WeaponId");

                    b.ToTable("CharacterWeapons", (string)null);
                });

            modelBuilder.Entity("Domain.Weapons.NPCWeapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BulletsInMagazine")
                        .HasColumnType("int");

                    b.Property<Guid>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SlotAttachments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsedSlots")
                        .HasColumnType("int");

                    b.Property<Guid>("WeaponId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NPCId");

                    b.HasIndex("WeaponId");

                    b.ToTable("NPCWeapons", (string)null);
                });

            modelBuilder.Entity("Domain.Weapons.Weapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Caliber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<float?>("CharacterAttributeModifier")
                        .HasColumnType("real");

                    b.Property<int?>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Distance")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Encumbrance")
                        .HasColumnType("int");

                    b.Property<string>("Handling")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Magazine")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Slots")
                        .HasColumnType("int");

                    b.Property<int>("TechLevel")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.Property<Guid>("WeaponTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("WeaponTypeId");

                    b.ToTable("Weapons", (string)null);
                });

            modelBuilder.Entity("Domain.Weapons.WeaponQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WeaponQualities", (string)null);
                });

            modelBuilder.Entity("Domain.Weapons.WeaponType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WeaponTypes", (string)null);
                });

            modelBuilder.Entity("Domain._Artifacts.Artifact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Activation")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Encumbrance")
                        .HasColumnType("int");

                    b.Property<string>("EnergyStorage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Magazine")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Artifacts", (string)null);
                });

            modelBuilder.Entity("Domain._Artifacts.CharacterArtifact", b =>
                {
                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ArtifactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChargeInMagazine")
                        .HasColumnType("int");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CharacterId", "ArtifactId");

                    b.HasIndex("ArtifactId");

                    b.ToTable("CharacterArtifacts", (string)null);
                });

            modelBuilder.Entity("Domain._Artifacts.NPCArtifact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ArtifactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChargeInMagazine")
                        .HasColumnType("int");

                    b.Property<Guid>("NPCId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ArtifactId");

                    b.HasIndex("NPCId");

                    b.ToTable("NPCArtifacts", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PotentialPotentialPrerequisite", b =>
                {
                    b.Property<Guid>("PotentialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrerequisitesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PotentialId", "PrerequisitesId");

                    b.HasIndex("PrerequisitesId");

                    b.ToTable("PotentialPotentialPrerequisite");
                });

            modelBuilder.Entity("ProtectionProtectionQuality", b =>
                {
                    b.Property<Guid>("ProtectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QualitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProtectionId", "QualitiesId");

                    b.HasIndex("QualitiesId");

                    b.ToTable("ProtectionProtectionQuality");
                });

            modelBuilder.Entity("RankRankPrerequisite", b =>
                {
                    b.Property<Guid>("PrerequisitesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PrerequisitesId", "RankId");

                    b.HasIndex("RankId");

                    b.ToTable("RankRankPrerequisite");
                });

            modelBuilder.Entity("WeaponWeaponQuality", b =>
                {
                    b.Property<Guid>("QualitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WeaponId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QualitiesId", "WeaponId");

                    b.HasIndex("WeaponId");

                    b.ToTable("WeaponWeaponQuality");
                });

            modelBuilder.Entity("CAttributeCulture", b =>
                {
                    b.HasOne("Domain.Characters.CAttribute", null)
                        .WithMany()
                        .HasForeignKey("BonusAttributesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Culture", null)
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CultCulture", b =>
                {
                    b.HasOne("Domain.Characters.Cult", null)
                        .WithMany()
                        .HasForeignKey("AvailableCultsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Culture", null)
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CultSkill", b =>
                {
                    b.HasOne("Domain.Characters.Skill", null)
                        .WithMany()
                        .HasForeignKey("BonusSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Cult", null)
                        .WithMany()
                        .HasForeignKey("CultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CultureSkill", b =>
                {
                    b.HasOne("Domain.Characters.Skill", null)
                        .WithMany()
                        .HasForeignKey("BonusSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Culture", null)
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Burns.CharacterBurn", b =>
                {
                    b.HasOne("Domain.Burns.Burn", "Burn")
                        .WithMany()
                        .HasForeignKey("BurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterBurns")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burn");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Domain.Burns.NPCBurn", b =>
                {
                    b.HasOne("Domain.Burns.Burn", "Burn")
                        .WithMany()
                        .HasForeignKey("BurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.NPCs.NPC", "NPC")
                        .WithMany("NPCBurns")
                        .HasForeignKey("NPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Burn");

                    b.Navigation("NPC");
                });

            modelBuilder.Entity("Domain.Characters.Character", b =>
                {
                    b.HasOne("Domain.Characters.Concept", "Concept")
                        .WithMany()
                        .HasForeignKey("ConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Cult", "Cult")
                        .WithMany()
                        .HasForeignKey("CultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.ApplicationUser", "ApplicationUser")
                        .WithMany("Characters")
                        .HasForeignKey("IdApplicationUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Rooms.Room", "Room")
                        .WithMany("Characters")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Concept");

                    b.Navigation("Cult");

                    b.Navigation("Culture");

                    b.Navigation("Rank");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Characters.CharacterAttribute", b =>
                {
                    b.HasOne("Domain.Characters.CAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterAttributes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Domain.Characters.CharacterBackground", b =>
                {
                    b.HasOne("Domain.Characters.Background", "Background")
                        .WithMany()
                        .HasForeignKey("BackgroundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterBackgrounds")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Background");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Domain.Characters.CharacterPotential", b =>
                {
                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterPontentials")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Potential", "Potential")
                        .WithMany()
                        .HasForeignKey("PotentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Potential");
                });

            modelBuilder.Entity("Domain.Characters.CharacterSkill", b =>
                {
                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterSkills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Characters.Concept", b =>
                {
                    b.HasOne("Domain.Characters.CAttribute", "BonusAttribute")
                        .WithMany()
                        .HasForeignKey("BonusAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BonusAttribute");
                });

            modelBuilder.Entity("Domain.Characters.ConceptSkill", b =>
                {
                    b.HasOne("Domain.Characters.Concept", "Concept")
                        .WithMany()
                        .HasForeignKey("ConceptId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Concept");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Characters.Potential", b =>
                {
                    b.HasOne("Domain.Characters.Cult", "Cult")
                        .WithMany()
                        .HasForeignKey("CultId");

                    b.Navigation("Cult");
                });

            modelBuilder.Entity("Domain.Characters.PotentialPrerequisite", b =>
                {
                    b.HasOne("Domain.Characters.CAttribute", "AttributeRequired")
                        .WithMany()
                        .HasForeignKey("AttributeRequiredId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Characters.Background", "BackgroundRequired")
                        .WithMany()
                        .HasForeignKey("BackgroundRequiredId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Characters.Rank", "RankRequired")
                        .WithMany()
                        .HasForeignKey("RankRequiredId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Characters.Skill", "SkillRequired")
                        .WithMany()
                        .HasForeignKey("SkillRequiredId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AttributeRequired");

                    b.Navigation("BackgroundRequired");

                    b.Navigation("RankRequired");

                    b.Navigation("SkillRequired");
                });

            modelBuilder.Entity("Domain.Characters.Rank", b =>
                {
                    b.HasOne("Domain.Characters.Cult", "Cult")
                        .WithMany()
                        .HasForeignKey("CultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Rank", "ParentRank")
                        .WithMany()
                        .HasForeignKey("ParentRankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Cult");

                    b.Navigation("ParentRank");
                });

            modelBuilder.Entity("Domain.Characters.RankPrerequisite", b =>
                {
                    b.HasOne("Domain.Characters.CAttribute", "AttributeRequired")
                        .WithMany()
                        .HasForeignKey("AttributeRequiredId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Characters.Background", "BackgroundRequired")
                        .WithMany()
                        .HasForeignKey("BackgroundRequiredId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Characters.Skill", "SkillRequired")
                        .WithMany()
                        .HasForeignKey("SkillRequiredId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AttributeRequired");

                    b.Navigation("BackgroundRequired");

                    b.Navigation("SkillRequired");
                });

            modelBuilder.Entity("Domain.Characters.Skill", b =>
                {
                    b.HasOne("Domain.Characters.CAttribute", "CAttribute")
                        .WithMany("Skills")
                        .HasForeignKey("CAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CAttribute");
                });

            modelBuilder.Entity("Domain.Equipments.CharacterEquipment", b =>
                {
                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterEquipments")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Equipments.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Domain.Equipments.Equipment", b =>
                {
                    b.HasOne("Domain.Equipments.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("Domain.Equipments.NPCEquipment", b =>
                {
                    b.HasOne("Domain.Equipments.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.NPCs.NPC", "NPC")
                        .WithMany("NPCEquipments")
                        .HasForeignKey("NPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("NPC");
                });

            modelBuilder.Entity("Domain.NPCs.NPCAttribute", b =>
                {
                    b.HasOne("Domain.Characters.CAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.NPCs.NPC", "NPC")
                        .WithMany("NPCAttributes")
                        .HasForeignKey("NPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("NPC");
                });

            modelBuilder.Entity("Domain.NPCs.NPCPotential", b =>
                {
                    b.HasOne("Domain.NPCs.NPC", "NPC")
                        .WithMany("NPCPotentials")
                        .HasForeignKey("NPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Potential", "Potential")
                        .WithMany()
                        .HasForeignKey("PotentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NPC");

                    b.Navigation("Potential");
                });

            modelBuilder.Entity("Domain.NPCs.NPCSkill", b =>
                {
                    b.HasOne("Domain.NPCs.NPC", "NPC")
                        .WithMany("NPCSkills")
                        .HasForeignKey("NPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NPC");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Domain.Protections.CharacterProtection", b =>
                {
                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterProtections")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Protections.Protection", "Protection")
                        .WithMany()
                        .HasForeignKey("ProtectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Protection");
                });

            modelBuilder.Entity("Domain.Protections.NPCProtection", b =>
                {
                    b.HasOne("Domain.NPCs.NPC", "NPC")
                        .WithMany("NPCProtections")
                        .HasForeignKey("NPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Protections.Protection", "Protection")
                        .WithMany()
                        .HasForeignKey("ProtectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NPC");

                    b.Navigation("Protection");
                });

            modelBuilder.Entity("Domain.Rooms.UserRoom", b =>
                {
                    b.HasOne("Domain.Users.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRooms")
                        .HasForeignKey("IdApplicationUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Rooms.Room", "Room")
                        .WithMany("UserRooms")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Vehicles.CharacterVehicle", b =>
                {
                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterVehicles")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Vehicles.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Domain.Vehicles.Vehicle", b =>
                {
                    b.HasOne("Domain.Vehicles.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("Domain.Weapons.CharacterWeapon", b =>
                {
                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterWeapons")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Weapons.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Domain.Weapons.NPCWeapon", b =>
                {
                    b.HasOne("Domain.NPCs.NPC", "NPC")
                        .WithMany("NPCWeapons")
                        .HasForeignKey("NPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Weapons.Weapon", "Weapon")
                        .WithMany()
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NPC");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Domain.Weapons.Weapon", b =>
                {
                    b.HasOne("Domain.Characters.CAttribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId");

                    b.HasOne("Domain.Weapons.WeaponType", "WeaponType")
                        .WithMany()
                        .HasForeignKey("WeaponTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("WeaponType");
                });

            modelBuilder.Entity("Domain._Artifacts.CharacterArtifact", b =>
                {
                    b.HasOne("Domain._Artifacts.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Character", "Character")
                        .WithMany("CharacterArtifacts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artifact");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Domain._Artifacts.NPCArtifact", b =>
                {
                    b.HasOne("Domain._Artifacts.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.NPCs.NPC", "NPC")
                        .WithMany("NPCArtifacts")
                        .HasForeignKey("NPCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artifact");

                    b.Navigation("NPC");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PotentialPotentialPrerequisite", b =>
                {
                    b.HasOne("Domain.Characters.Potential", null)
                        .WithMany()
                        .HasForeignKey("PotentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.PotentialPrerequisite", null)
                        .WithMany()
                        .HasForeignKey("PrerequisitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProtectionProtectionQuality", b =>
                {
                    b.HasOne("Domain.Protections.Protection", null)
                        .WithMany()
                        .HasForeignKey("ProtectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Protections.ProtectionQuality", null)
                        .WithMany()
                        .HasForeignKey("QualitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RankRankPrerequisite", b =>
                {
                    b.HasOne("Domain.Characters.RankPrerequisite", null)
                        .WithMany()
                        .HasForeignKey("PrerequisitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Characters.Rank", null)
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WeaponWeaponQuality", b =>
                {
                    b.HasOne("Domain.Weapons.WeaponQuality", null)
                        .WithMany()
                        .HasForeignKey("QualitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Weapons.Weapon", null)
                        .WithMany()
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Characters.CAttribute", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Domain.Characters.Character", b =>
                {
                    b.Navigation("CharacterArtifacts");

                    b.Navigation("CharacterAttributes");

                    b.Navigation("CharacterBackgrounds");

                    b.Navigation("CharacterBurns");

                    b.Navigation("CharacterEquipments");

                    b.Navigation("CharacterPontentials");

                    b.Navigation("CharacterProtections");

                    b.Navigation("CharacterSkills");

                    b.Navigation("CharacterVehicles");

                    b.Navigation("CharacterWeapons");
                });

            modelBuilder.Entity("Domain.NPCs.NPC", b =>
                {
                    b.Navigation("NPCArtifacts");

                    b.Navigation("NPCAttributes");

                    b.Navigation("NPCBurns");

                    b.Navigation("NPCEquipments");

                    b.Navigation("NPCPotentials");

                    b.Navigation("NPCProtections");

                    b.Navigation("NPCSkills");

                    b.Navigation("NPCWeapons");
                });

            modelBuilder.Entity("Domain.Rooms.Room", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("UserRooms");
                });

            modelBuilder.Entity("Domain.Users.ApplicationUser", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("UserRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
