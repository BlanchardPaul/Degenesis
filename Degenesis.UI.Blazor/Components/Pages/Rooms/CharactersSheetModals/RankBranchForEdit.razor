<MudStack AlignItems="AlignItems.Center" Spacing="1">
    <MudTooltip Placement="Placement.Right">
        <ChildContent>
            <MudChip T="Guid"
                     Value="@Rank.Id"
                     OnClick="@(() => OnRankSelected.InvokeAsync(Rank.Id))"
                     Color="@(SelectedRankId == Rank.Id ? Color.Primary : Color.Default)"
                     Disabled="@IsRankDisabled(Rank)"
                     Class="px-6 py-2 rounded-xl font-bold">
                @Rank.Name
            </MudChip>
        </ChildContent>
        <TooltipContent>
            <MudText Align="Align.Left" Typo="Typo.h6">
                Result : <MudText Inline>@Rank.Description</MudText>
            </MudText>

            @if (Rank.Prerequisites.Any())
            {
                <MudDivider />
                <MudText Align="Align.Left" Typo="Typo.h6">
                    Prerequisites :
                    <MudText Inline>
                        @string.Join(" | ", Rank.Prerequisites.Select(GetPrerequisiteLabel))
                    </MudText>
                </MudText>
            }

            @if (!string.IsNullOrWhiteSpace(Rank.Equipment))
            {
                <MudDivider/>
                <MudText Align="Align.Left" Typo="Typo.h6">
                    Equipment : <MudText Inline>@Rank.Equipment</MudText>
                </MudText>
            }
        </TooltipContent>
    </MudTooltip>

    @if (Children.Any())
    {
        <div class="rank-connector-vertical"></div>
        <div class="rank-children">
            @foreach (var child in Children.OrderBy(c => c.Name))
            {
                <div class="rank-child">
                    <RankBranchForEdit Rank="child"
                                AllRanks="AllRanks"
                                Character="Character"
                                SelectedRankId="SelectedRankId"
                                OnRankSelected="OnRankSelected" />
                </div>
            }
        </div>
    }

</MudStack>
